<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Kotlin】Android开发Java到Kotlin的过渡</title>
    <link href="/2022/09/20/Android%E5%BC%80%E5%8F%91Java%E5%88%B0Kotlin%E7%9A%84%E8%BF%87%E6%B8%A1-md/"/>
    <url>/2022/09/20/Android%E5%BC%80%E5%8F%91Java%E5%88%B0Kotlin%E7%9A%84%E8%BF%87%E6%B8%A1-md/</url>
    
    <content type="html"><![CDATA[<h3 id="属性初始化"><a href="#属性初始化" class="headerlink" title="属性初始化"></a>属性初始化</h3><ol><li>在类声明中直接为变量赋值；</li><li>在初始化块中初始化： <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFragment</span> : <span class="hljs-type">Fragment</span>() &#123;<br>    <span class="hljs-keyword">val</span> index: <span class="hljs-built_in">Int</span>   <br>     <br>    <span class="hljs-keyword">init</span> &#123;       <br>     index = <span class="hljs-number">12</span>   <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>延迟初始化：<br> 在 Kotlin 中，必须在&#x3D;&#x3D;声明对象时&#x3D;&#x3D;初始化对象的属性，使用 <code>lateinit</code> 推迟属性初始化<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFragment</span> : <span class="hljs-type">Fragment</span>() &#123; <br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> usernameEditText: EditText    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> passwordEditText: EditText    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> loginButton: Button    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> statusTextView: TextView   <br> <br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onViewCreated</span><span class="hljs-params">(view: <span class="hljs-type">View</span>, savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;    <br><span class="hljs-keyword">super</span>.onViewCreated(view, savedInstanceState)      <br>  <br>usernameEditText = view.findViewById(R.id.username_edit_text)       <br>passwordEditText = view.findViewById(R.id.password_edit_text)        <br>loginButton = view.findViewById(R.id.login_button)        <br>statusTextView = view.findViewById(R.id.status_text_view)    <br>&#125;    <br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h3><blockquote><p>用于定义在概念上与某个类型相关但不与某个特定对象关联的变量或函数。</p></blockquote><p>类似于对变量和方法使用 Java 的 <code>static</code> 关键字。</p><h3 id="属性委托"><a href="#属性委托" class="headerlink" title="属性委托"></a>属性委托</h3><p>通过属性委托初始化属性，实现在整个应用中的对象复用机制</p><p>机制：反射（性能开销大）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//template</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br>    <span class="hljs-keyword">var</span> p: String <span class="hljs-keyword">by</span> Delegate()<br>&#125;<br><br><span class="hljs-comment">//example</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> viewModel: LoginViewModel <span class="hljs-keyword">by</span> viewModels()<br></code></pre></td></tr></table></figure><p>在 <code>by</code>后面的表达式是委托， 属性对应的 <code>get()</code>与 <code>set()</code>会被委托给它的 <code>getValue()</code> 与 <code>setValue()</code> 方法<br>属性的委托不必实现任何的接口，但是需要提供一个 <code>getValue()</code> 方法（对于 <em>var</em> 属性还要提供 <code>setValue()</code>方法）</p><h4 id="Lazy-properties"><a href="#Lazy-properties" class="headerlink" title="Lazy properties"></a>Lazy properties</h4><p>第一次使用到变量时才进行初始化，即进入<code>lazy</code>块：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> lazyValue: String <span class="hljs-keyword">by</span> lazy &#123;<br>    println(<span class="hljs-string">&quot;computed!&quot;</span>)<br>    <span class="hljs-string">&quot;Hello&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="observable-properties"><a href="#observable-properties" class="headerlink" title="observable properties"></a>observable properties</h4><p>监听器会收到有关此属性变更的通知：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-comment">//Delegates.observable(初始值) &#123; 修改时处理程序（handler） &#125;</span><br>    <span class="hljs-keyword">var</span> name: String <span class="hljs-keyword">by</span> Delegates.observable(<span class="hljs-string">&quot;&lt;no name&gt;&quot;</span>) &#123;<br>    <span class="hljs-comment">//闭包的三个参数：被赋值的属性、旧值与新值：</span><br>        prop, old, new -&gt;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$old</span> -&gt; <span class="hljs-variable">$new</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Kotlin协程"><a href="#Kotlin协程" class="headerlink" title="Kotlin协程"></a>Kotlin协程</h3><p>reference: <a href="https://www.kotlincn.net/docs/reference/android-overview.html">Kotlin Develop.doc</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android UI design</title>
    <link href="/2022/09/19/design/"/>
    <url>/2022/09/19/design/</url>
    
    <content type="html"><![CDATA[<p>记录了一些开发过程中整理的UI设计方案，持续更新…</p><h2 id="关联toolbar和drawerLayout"><a href="#关联toolbar和drawerLayout" class="headerlink" title="关联toolbar和drawerLayout"></a>关联<code>toolbar</code>和<code>drawerLayout</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ActionBarDrawerToggle(Activity activity, DrawerLayout drawerLayout,Toolbar toolbar, <span class="hljs-meta">@StringRes</span> <span class="hljs-type">int</span> openDrawerContentDescRes,<span class="hljs-meta">@StringRes</span> <span class="hljs-type">int</span> closeDrawerContentDescRes) <br></code></pre></td></tr></table></figure><p><code>BottomNavigationView</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">navigation.setOnNavigationItemSelectedListener();<span class="hljs-comment">/*设置点击事件*/</span><br></code></pre></td></tr></table></figure><p><code>FloatingActionButton</code> &amp; <code>SnackBar</code></p><p>浮动菜单设置点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">setOnClickListener();<br><span class="hljs-comment">/*Snackbar弹出和响应*/</span><br>snackbar.make(v,String,<span class="hljs-type">int</span> time)<br>    .setAction(String,OnClickListener())<br></code></pre></td></tr></table></figure><h2 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*设置卡片背景色、圆角效果、阴影效果、卡片内容四周间距*/</span><br>app:cardBackgroundColor=<span class="hljs-string">&quot;&quot;</span><br>app:cardCornerRadius=<span class="hljs-string">&quot;&quot;</span><br>app:cardElevation=<span class="hljs-string">&quot;&quot;</span><br>app:contentPadding=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">/*通过foreground设置点击效果*/</span><br></code></pre></td></tr></table></figure><p>滚动模式</p><h2 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*直接控件可设置的Layout_scrollFlags滚动模式属性*/</span><br>app:layout_scrollFlags=<span class="hljs-string">&quot;&quot;</span><br>    scroll|exitUnilCollapsed:子控件可以滚动，向上滚动出父布局<br>  scroll|enterAlways:向下滚动该布局就会显示出来，向上滑动时该布局就会向上收缩<br>    scroll|enterAlwaysCollapsed:向下滚动到最低端时该布局才会显示出来<br>    scroll|snap:吸附效果，确保childView不会滑动并停止在中间的状态<br>    如果不设置该属性则布局不能滑动<br></code></pre></td></tr></table></figure><h2 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*直接子控件可以设置Layout_collapseMode（折叠模式）属性*/</span><br>app:layout_collapseMode=<span class="hljs-string">&quot;&quot;</span><br>    pin:滑动过程中该布局会固定在它所在的的位置不动，直到CollapsingToolbarLayout全部折叠或展开<br>    parallax:视差效果，滑动过程都有视差效果<br>    不设置就跟随一起滑动<br></code></pre></td></tr></table></figure><p>Material Design动画</p><h2 id="Recyclerview"><a href="#Recyclerview" class="headerlink" title="Recyclerview"></a>Recyclerview</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">recyclerview.CircleImageView</span>&gt;</span><br>    y<br><span class="hljs-tag">&lt;/<span class="hljs-name">recyclerview.CircleImageView</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spinner"><a href="#Spinner" class="headerlink" title="Spinner"></a><strong>Spinner</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Spinner</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/spinner1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:entries</span>=<span class="hljs-string">&quot;@array/languages&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>菜单显示方式</strong><code>spinnerMode</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:spinnerMode=&quot;dropdown&quot;下拉菜单<br>android:spinnerMode=&quot;dialog&quot;弹出框<br></code></pre></td></tr></table></figure><p>android:entries&#x3D;”@array&#x2F;languages”表示Spinner的数据集合是从资源数组languages中获取的，languages数组资源定义在values&#x2F;arrays.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string-array</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;languages&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>c语言<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>java <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>php<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>xml<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>html<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">string-array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过OnItemSelectedListener的回调方法实现选择响应事件。</p><p>数据绑定的其他方式：</p><ul><li><strong>使用ArrayAdapter</strong></li><li><strong>自定义的BaseAdapter</strong></li></ul><h2 id="设置间距的最佳方案：LinearLayout-的divider"><a href="#设置间距的最佳方案：LinearLayout-的divider" class="headerlink" title="设置间距的最佳方案：LinearLayout 的divider"></a>设置间距的最佳方案：LinearLayout 的divider</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:orientation=&quot;vertical&quot;<br>android:showDividers=&quot;middle&quot;<br>android:divider=&quot;@drawable/spacer&quot;<br></code></pre></td></tr></table></figure><h3 id="shape图形使用"><a href="#shape图形使用" class="headerlink" title="shape图形使用"></a>shape图形使用</h3><ol><li>在<code>res/drawable</code>目录下新建一个xml文件</li><li>Root为<code>&lt;shape&gt;</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">shape</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:shape</span>=<span class="hljs-string">[</span>&quot;<span class="hljs-attr">rectangle</span>&quot; | &quot;<span class="hljs-attr">oval</span>&quot; | &quot;<span class="hljs-attr">line</span>&quot; | &quot;<span class="hljs-attr">ring</span>&quot;]     </span><br><span class="hljs-tag">   //<span class="hljs-attr">共有4种类型</span>，<span class="hljs-attr">矩形</span>（<span class="hljs-attr">默认</span>）/<span class="hljs-attr">椭圆形</span>/<span class="hljs-attr">直线形</span>/<span class="hljs-attr">环形</span></span><br><span class="hljs-tag">    &lt;<span class="hljs-attr">corners</span>&gt;</span>定义圆角<span class="hljs-tag">&lt;/<span class="hljs-name">corners</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">gradient</span>&gt;</span>定义渐变效果<span class="hljs-tag">&lt;/<span class="hljs-name">gradient</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">padding</span>&gt;</span>定义内边距<span class="hljs-tag">&lt;/<span class="hljs-name">padding</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">size</span>&gt;</span>自定义图形大小<span class="hljs-tag">&lt;/<span class="hljs-name">size</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">solid</span>&gt;</span>填充色<span class="hljs-tag">&lt;/<span class="hljs-name">solid</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">stroke</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:dashWidth</span>=<span class="hljs-string">&quot;虚线宽度，0为实线&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:dashGap</span>=<span class="hljs-string">&quot;虚线间隔&quot;</span>&gt;</span>描边<span class="hljs-tag">&lt;/<span class="hljs-name">stroke</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">shape</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog破壳日</title>
    <link href="/2022/09/18/Blog%E7%A0%B4%E5%A3%B3%E6%97%A5/"/>
    <url>/2022/09/18/Blog%E7%A0%B4%E5%A3%B3%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h2><p>在这里我会把所有学习整理出的技术博客迁移上来。终于有一个地方能够一起安放我的小小文档们了。</p><p>可能也会连载一些生活吐槽（不确定），在成为一个优秀的软件开发工程师的路途上慢慢跋涉吧～</p><hr><p>欢迎联系我交流技术学习！</p>]]></content>
    
    
    
    <tags>
      
      <tag>LifeTalk</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
